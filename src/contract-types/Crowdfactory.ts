/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface CrowdfactoryInterface extends utils.Interface {
  functions: {
    "createProject(string,uint256,string,address)": FunctionFragment;
    "publishedProjs(uint256)": FunctionFragment;
    "totalPublishedProjs()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProject"
      | "publishedProjs"
      | "totalPublishedProjs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishedProjs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPublishedProjs",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishedProjs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPublishedProjs",
    data: BytesLike
  ): Result;

  events: {
    "Projectcreated(string,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Projectcreated"): EventFragment;
}

export interface ProjectcreatedEventObject {
  projTitle: string;
  goalAmount: BigNumber;
  ownerWallet: string;
  projAddress: string;
  timestamp: BigNumber;
}
export type ProjectcreatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  ProjectcreatedEventObject
>;

export type ProjectcreatedEventFilter = TypedEventFilter<ProjectcreatedEvent>;

export interface Crowdfactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdfactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProject(
      projectTitle: PromiseOrValue<string>,
      projgoalAmount: PromiseOrValue<BigNumberish>,
      projDescript: PromiseOrValue<string>,
      ownerWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishedProjs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalPublishedProjs(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createProject(
    projectTitle: PromiseOrValue<string>,
    projgoalAmount: PromiseOrValue<BigNumberish>,
    projDescript: PromiseOrValue<string>,
    ownerWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishedProjs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalPublishedProjs(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createProject(
      projectTitle: PromiseOrValue<string>,
      projgoalAmount: PromiseOrValue<BigNumberish>,
      projDescript: PromiseOrValue<string>,
      ownerWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    publishedProjs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalPublishedProjs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Projectcreated(string,uint256,address,address,uint256)"(
      projTitle?: null,
      goalAmount?: null,
      ownerWallet?: PromiseOrValue<string> | null,
      projAddress?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): ProjectcreatedEventFilter;
    Projectcreated(
      projTitle?: null,
      goalAmount?: null,
      ownerWallet?: PromiseOrValue<string> | null,
      projAddress?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): ProjectcreatedEventFilter;
  };

  estimateGas: {
    createProject(
      projectTitle: PromiseOrValue<string>,
      projgoalAmount: PromiseOrValue<BigNumberish>,
      projDescript: PromiseOrValue<string>,
      ownerWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishedProjs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPublishedProjs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createProject(
      projectTitle: PromiseOrValue<string>,
      projgoalAmount: PromiseOrValue<BigNumberish>,
      projDescript: PromiseOrValue<string>,
      ownerWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishedProjs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPublishedProjs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
